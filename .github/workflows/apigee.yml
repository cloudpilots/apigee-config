# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Apigee CI/CD with Maven

on:
  push:
    branches:
      - main
      - acceptance
      - dev
      - test

env:
  GCP_SA_JSON: ${{ secrets.SA_JSON }}
  GCLOUD_SA_JSON: ${{ secrets.GCLOUD_SA_JSON }}
  PARENT_POM: ${{secrets.PARENT_POM}}
  GIT_BRANCH: ''
  APIGEE_ORG: ''
  APIGEE_ENV: ''
  APIGEE_DEPLOYMENT_SUFFIX: ''
  DEFAULT_APIGEE_ORG: cpl-apigee-ng
  DEFAULT_APIGEE_ENV: test

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8

      # - name: Set up node
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 16

      - name: 'Setup jq'
        uses:
          sergeysova/jq-action@v2.2.1

      - name: 'Setup yq'
        uses:
          chrisdickinson/setup-yq@latest

      # Generate SA key file from secret variable
      - name: Generate SA key file
        run: |
          echo $GCP_SA_JSON > sa.json

      - name: Setup Google auth
        id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          workload_identity_provider: 'projects/329187474656/locations/global/workloadIdentityPools/apigee-auth/providers/github'
          service_account: 'apigee-sa@cpl-apigee-ng.iam.gserviceaccount.com'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
        with:
          version: '>= 363.0.0'

      - id: 'gcloud'
        name: 'gcloud'
        run: |-
          gcloud secrets list --project=cpl-apigee-ng --format=json

      # Set Variables depending on branch
      - name: Set Variables for [Main] (Prod) branch
        if: github.ref == 'refs/heads/main'
        run: |
          echo "APIGEE_ENV=prod" >> $GITHUB_ENV

      - name: Set Variables for [Acceptance] branch
        if: github.ref == 'refs/heads/acceptance'
        run: |
          echo "APIGEE_ENV=acceptance" >> $GITHUB_ENV

      - name: Set Variables for [Dev] branch
        if: github.ref == 'refs/heads/dev'
        run: |
          echo "APIGEE_ENV=dev" >> $GITHUB_ENV

      - name: Set Variables for branch not [Main], not [Acceptance], not [Dev]
        if: github.ref != 'refs/heads/main' && github.ref != 'refs/heads/acceptance' && github.ref != 'refs/heads/dev'
        run: |
          echo "APIGEE_ENV=$(echo $DEFAULT_APIGEE_ENV)" >> $GITHUB_ENV

      # - name: Set up apigeelint
      #   run: npm install apigeelint

      # - name: Static Code Analysis
      #   shell: "bash"
      #   run: |
      #     cd "$_WORK_DIR"
      #     npm run apigeelint | tee report.apigeelint.html && \
      #     if [ ${PIPESTATUS[0]} -ne "0" ]; then exit -1; fi && \

      - name: 'Google Secrets replacement'
        id: 'secret-replace'
        run: |-
          SECRETS=$(gcloud secrets list --project=cpl-apigee-ng --format=json) 
          echo $SECRETS > secrets.json
          cat secrets.json
          jq -c '.[].name' secrets.json > processed-secrets.json 
          cat processed-secrets.json
          while read line; do
              # do stuff with $i
              echo $line
              prefix="projects/329187474656/secrets/"
              suffix="\""
              foo=${line#"$prefix"}
              secret=$(echo $foo | awk -F $prefix '{print $2}' | awk -F $suffix '{print $1}')
              echo $secret
              secretValue=$(gcloud secrets versions access latest --project=cpl-apigee-ng --secret=$secret)
              echo $secretValue
              file_name=$(grep -lrw "$secret" ./config/$APIGEE_ENV)
              echo $APIGEE_ENV
              yq -i -o=json '(.[].entry[] | select(.value == '\"${secret}\"') | .value)='\"${secretValue}\"'' ${file_name}

          done < ./processed-secrets.json

      - name: 'Merge configs'
        id: 'merge-configs'
        run: |-
          for d in */ ; do
            echo "$d"
            suffix="/"
            sf=${d%"$suffix"}
            jq -s 'reduce inputs as $i (.; .list += $i.list) | flatten' $d/* > "$sf.json"
          done

      # - name: Cache Maven packages
      #   uses: actions/cache@v2
      #   with:
      #     path: ~/.m2
      #     key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
      #     restore-keys: ${{ runner.os }}-m2

      - name: Prepare repo for maven deployment
        shell: bash
        run: |
          echo $PARENT_POM > pom.xml
          pushd config/env/$APIGEE_ENV
          for folder in */ ; do
            echo "$folder"
            suffix="/"
            sf=${folder%"$suffix"}
            jq -s 'reduce inputs as $i (.; .list += $i.list) | flatten' $d/* > "$sf.json"
          done
          popd

      - name: Deploy apigee config with Maven
        shell: bash
        run: |
          export BRANCH_NAME="${GITHUB_REF##*/}"
          if [ -z "$GCP_SA_JSON" ]; then
            echo "GCP_SA_JSON is required"
            exit 1
          fi
          echo $GCP_SA_JSON > sa.json
          mvn clean install -Pcicd -Denv=$APIGEE_ENV -Dorg=$DEFAULT_APIGEE_ORG -Dfile=sa.json -Dapigee.config.options=update

      # - name: Clean up repo
      #   shell: bash
      #   run: |
      #     POMS=$(find . -name "*pom.xml" -type f)
      #     for pom in $POMS
      #     do
      #       echo "$pom"
      #       rm -f $pom
      #     done
